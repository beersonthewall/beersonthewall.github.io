<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Articles on Beersonthewall</title>
    <link>https://www.beersonthewall.com/blog/</link>
    <description>Recent content in Articles on Beersonthewall</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 28 Feb 2022 07:34:11 -0600</lastBuildDate>
    
	<atom:link href="https://www.beersonthewall.com/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Kernel Debug Log 1</title>
      <link>https://www.beersonthewall.com/blog/kernel-debug-log/</link>
      <pubDate>Mon, 28 Feb 2022 07:34:11 -0600</pubDate>
      
      <guid>https://www.beersonthewall.com/blog/kernel-debug-log/</guid>
      <description>Debug logs:
What follows is more-or-less stream of conciousness notes written while I was debugging my kernel code. I&amp;rsquo;ve found that writing my thought process down makes it easier to logically work through a problem. Additionally it&amp;rsquo;s nice to document how I&amp;rsquo;ve solved problems.
The problem statement:
I&amp;rsquo;m currently trying to implement recursive page tables in my x86_64 kernel project. I&amp;rsquo;ve just gotten the map() function for the page mapper to stop faulting when mapping a test page, now we&amp;rsquo;re trying to make use of the newly mapped page:</description>
    </item>
    
    <item>
      <title>Weird Rust Lifetime Error</title>
      <link>https://www.beersonthewall.com/blog/weird-rust-lifetime-error/</link>
      <pubDate>Wed, 22 Dec 2021 11:09:20 -0600</pubDate>
      
      <guid>https://www.beersonthewall.com/blog/weird-rust-lifetime-error/</guid>
      <description>While working on a side project I encounterd some surprising (to me) behavior when I tried to change a function from using a named return type to Self.
Here&amp;rsquo;s a boiled-down example of the code I started with:
struct A&amp;lt;&amp;#39;a&amp;gt; { value: &amp;amp;&amp;#39;a str, } impl A&amp;lt;&amp;#39;_&amp;gt; { fn new(src: &amp;amp;str) -&amp;gt; A { A { value: src, } } fn value(&amp;amp;self) -&amp;gt; &amp;amp;str { self.value } } fn main() { let value = &amp;#34;Hello, World!</description>
    </item>
    
  </channel>
</rss>